+ Parse the DSL to statement type with special characters

+ Compare Operators for the keys of json with constants

+ Conjuntion type

+ Operator type

+ Make all utility functions return type (bool,err)

+ Create a map/hash of string and func(string,string) (bool,err)

+ Remove the evaluate.go and make the evaluations in value expressions evalutate functions

+ The long switch to evaluate has to be taken care of

+ Evaluated rule to a bool (Ah finally) (with IsEqualTo,AND,OR)

- Need to add other Operators

+ parse with space and not special characters

- Collection expression (ANY,SOME)

- Precedence of operations

- Compare Operators for the keys of json

- make all unexported functions small case

- Add comments for all exported functions

"Everything is a expression" -- Needs a lot more ideas on making this work

Need to take a design decision on whether two stepes of reductions are needed 
 1 ValueExpr -> True/False Expr -> bool -  better as it makes all a expression
 2 SIngle reduce which has the entire logic of handling conjucation expr and value expr
 the first option may be thought about in go-Routines
 
 Design decision on whether to have (bool,err) type or a custom type - Not intuitive


 
